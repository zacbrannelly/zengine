#include "GUILibrary.h"

#include "imgui-includes.h"
#include "../Display/Display.h"
#include "../Input/InputManager.h"
#include "../Rendering/Graphics.h"

void GUILibrary::Init(Display* display)
{
	// Default toolbar height to 100px.
	_toolbarHeight = 100;

	imguiCreate();
	ImGui_ImplGlfw_InitForOpenGL(display->GetHandle(), false);
	
	auto input = InputManager::GetInstance();

	// Register the callbacks to the input manager
	input->RegisterMouseButtonCallback(ImGui_ImplGlfw_MouseButtonCallback);
	input->RegisterKeyCallback(ImGui_ImplGlfw_KeyCallback);

	// Setup the rest of the callbacks we don't clash with (yet)
	glfwSetScrollCallback(display->GetHandle(), ImGui_ImplGlfw_ScrollCallback);
	glfwSetCharCallback(display->GetHandle(), ImGui_ImplGlfw_CharCallback);

	ImGui::GetIO().ConfigFlags |= ImGuiConfigFlags_DockingEnable;

	ImGui::StyleColorsDark();
	ImGui::LoadIniSettingsFromDisk("layout.ini");

	ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(8, 8));
	ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(8, 8));
	ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(8, 8));
	ImGui::PushStyleVar(ImGuiStyleVar_WindowBorderSize, 1);
	ImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 8);
	ImGui::PushStyleVar(ImGuiStyleVar_FrameBorderSize, 1);
	ImGui::PushStyleVar(ImGuiStyleVar_TabRounding, 8);
	ImGui::PushStyleVar(ImGuiStyleVar_ChildBorderSize, 0);
	ImGui::PushStyleVar(ImGuiStyleVar_ChildRounding, 8);

	// Generated by the style editor:
	ImVec4* colors = ImGui::GetStyle().Colors;
	colors[ImGuiCol_Text]                   = ImVec4(1.00f, 1.00f, 1.00f, 1.00f);
	colors[ImGuiCol_TextDisabled]           = ImVec4(0.50f, 0.50f, 0.50f, 1.00f);
	colors[ImGuiCol_WindowBg]               = ImVec4(0.11f, 0.11f, 0.11f, 1.00f);
	colors[ImGuiCol_ChildBg]                = ImVec4(0.11f, 0.11f, 0.11f, 1.00f);
	colors[ImGuiCol_PopupBg]                = ImVec4(0.11f, 0.11f, 0.11f, 1.00f);
	colors[ImGuiCol_Border]                 = ImVec4(0.43f, 0.43f, 0.50f, 0.50f);
	colors[ImGuiCol_BorderShadow]           = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);
	colors[ImGuiCol_FrameBg]                = ImVec4(0.02f, 0.02f, 0.02f, 1.00f);
	colors[ImGuiCol_FrameBgHovered]         = ImVec4(0.22f, 0.22f, 0.22f, 1.00f);
	colors[ImGuiCol_FrameBgActive]          = ImVec4(0.18f, 0.18f, 0.20f, 1.00f);
	colors[ImGuiCol_TitleBg]                = ImVec4(0.00f, 0.00f, 0.00f, 1.00f);
	colors[ImGuiCol_TitleBgActive]          = ImVec4(0.08f, 0.08f, 0.08f, 1.00f);
	colors[ImGuiCol_TitleBgCollapsed]       = ImVec4(0.10f, 0.10f, 0.12f, 1.00f);
	colors[ImGuiCol_MenuBarBg]              = ImVec4(0.10f, 0.10f, 0.12f, 1.00f);
	colors[ImGuiCol_ScrollbarBg]            = ImVec4(0.00f, 0.00f, 0.00f, 1.00f);
	colors[ImGuiCol_ScrollbarGrab]          = ImVec4(0.22f, 0.22f, 0.22f, 1.00f);
	colors[ImGuiCol_ScrollbarGrabHovered]   = ImVec4(0.38f, 0.38f, 0.38f, 1.00f);
	colors[ImGuiCol_ScrollbarGrabActive]    = ImVec4(0.22f, 0.22f, 0.24f, 1.00f);
	colors[ImGuiCol_CheckMark]              = ImVec4(0.20f, 0.20f, 0.22f, 1.00f);
	colors[ImGuiCol_SliderGrab]             = ImVec4(0.15f, 0.15f, 0.17f, 1.00f);
	colors[ImGuiCol_SliderGrabActive]       = ImVec4(0.18f, 0.18f, 0.20f, 1.00f);
	colors[ImGuiCol_Button]                 = ImVec4(0.00f, 0.00f, 0.00f, 1.00f);
	colors[ImGuiCol_ButtonHovered]          = ImVec4(0.26f, 0.26f, 0.26f, 1.00f);
	colors[ImGuiCol_ButtonActive]           = ImVec4(0.22f, 0.22f, 0.24f, 1.00f);
	colors[ImGuiCol_Header]                 = ImVec4(0.23f, 0.23f, 0.23f, 1.00f);
	colors[ImGuiCol_HeaderHovered]          = ImVec4(0.26f, 0.26f, 0.26f, 1.00f);
	colors[ImGuiCol_HeaderActive]           = ImVec4(0.22f, 0.22f, 0.24f, 1.00f);
	colors[ImGuiCol_Separator]              = ImVec4(0.43f, 0.43f, 0.50f, 0.50f);
	colors[ImGuiCol_SeparatorHovered]       = ImVec4(0.10f, 0.40f, 0.75f, 0.78f);
	colors[ImGuiCol_SeparatorActive]        = ImVec4(0.10f, 0.40f, 0.75f, 1.00f);
	colors[ImGuiCol_ResizeGrip]             = ImVec4(0.15f, 0.15f, 0.17f, 1.00f);
	colors[ImGuiCol_ResizeGripHovered]      = ImVec4(0.18f, 0.18f, 0.20f, 1.00f);
	colors[ImGuiCol_ResizeGripActive]       = ImVec4(0.22f, 0.22f, 0.24f, 1.00f);
	colors[ImGuiCol_Tab]                    = ImVec4(0.10f, 0.10f, 0.12f, 1.00f);
	colors[ImGuiCol_TabHovered]             = ImVec4(0.15f, 0.15f, 0.17f, 1.00f);
	colors[ImGuiCol_TabActive]              = ImVec4(0.18f, 0.18f, 0.20f, 1.00f);
	colors[ImGuiCol_TabUnfocused]           = ImVec4(0.10f, 0.10f, 0.12f, 1.00f);
	colors[ImGuiCol_TabUnfocusedActive]     = ImVec4(0.15f, 0.15f, 0.17f, 1.00f);
	colors[ImGuiCol_DockingPreview]         = ImVec4(0.26f, 0.59f, 0.98f, 0.70f);
	colors[ImGuiCol_DockingEmptyBg]         = ImVec4(0.20f, 0.20f, 0.20f, 1.00f);
	colors[ImGuiCol_PlotLines]              = ImVec4(0.20f, 0.20f, 0.22f, 1.00f);
	colors[ImGuiCol_PlotLinesHovered]       = ImVec4(0.25f, 0.25f, 0.27f, 1.00f);
	colors[ImGuiCol_PlotHistogram]          = ImVec4(0.20f, 0.20f, 0.22f, 1.00f);
	colors[ImGuiCol_PlotHistogramHovered]   = ImVec4(0.25f, 0.25f, 0.27f, 1.00f);
	colors[ImGuiCol_TableHeaderBg]          = ImVec4(0.19f, 0.19f, 0.20f, 1.00f);
	colors[ImGuiCol_TableBorderStrong]      = ImVec4(0.31f, 0.31f, 0.35f, 1.00f);
	colors[ImGuiCol_TableBorderLight]       = ImVec4(0.23f, 0.23f, 0.25f, 1.00f);
	colors[ImGuiCol_TableRowBg]             = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);
	colors[ImGuiCol_TableRowBgAlt]          = ImVec4(1.00f, 1.00f, 1.00f, 0.06f);
	colors[ImGuiCol_TextSelectedBg]         = ImVec4(0.13f, 0.13f, 0.15f, 1.00f);
	colors[ImGuiCol_DragDropTarget]         = ImVec4(0.13f, 0.13f, 0.15f, 1.00f);
	colors[ImGuiCol_NavHighlight]           = ImVec4(0.13f, 0.13f, 0.15f, 1.00f);
	colors[ImGuiCol_NavWindowingHighlight]  = ImVec4(0.13f, 0.13f, 0.15f, 1.00f);
	colors[ImGuiCol_NavWindowingDimBg]      = ImVec4(0.10f, 0.10f, 0.12f, 1.00f);
	colors[ImGuiCol_ModalWindowDimBg]       = ImVec4(0.49f, 0.49f, 0.49f, 0.70f);
}

void GUILibrary::NewFrame()
{
	ImGui_ImplGlfw_NewFrame();
	ImGui::NewFrame();
	ImGuizmo::BeginFrame();
}

void GUILibrary::EndFrame()
{
	ImGui::GetIO().DisplayFramebufferScale = ImVec2(1, 1);

	ImGui::EndFrame();
	imguiEndFrame();
}

void GUILibrary::BeginMainWindow()
{
	// Get the display size from ImGui
	auto displaySize = ImGui::GetIO().DisplaySize;

	// Create a dockspace window that is the size of the display always 
	ImGui::SetNextWindowPos(ImVec2(0, _toolbarHeight));
	ImGui::SetNextWindowSize(ImVec2(displaySize.x, displaySize.y - _toolbarHeight));

	ImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 0);
	ImGui::Begin("MainWindow", (bool*)0, ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoNavFocus | ImGuiWindowFlags_NoDecoration);
	ImGui::DockSpace(ImGui::GetID("MyDockSpace"), ImVec2(0, 0), ImGuiDockNodeFlags_PassthruCentralNode);
	ImGui::PopStyleVar();

	ImGui::ShowDemoWindow();
}

void GUILibrary::EndMainWindow()
{
	ImGui::End();
}

void GUILibrary::BeginToolbarWindow()
{
 	// Get the display size from ImGui
	auto displaySize = ImGui::GetIO().DisplaySize;

	ImGui::SetNextWindowPos(ImVec2(0, 0));
	ImGui::SetNextWindowSize(ImVec2(displaySize.x, _toolbarHeight));

	// Disable window rounding + border
	ImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 0);
	ImGui::PushStyleVar(ImGuiStyleVar_WindowBorderSize, 0);

	ImGui::Begin("Toolbar", nullptr, ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_MenuBar | ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoNavFocus | ImGuiWindowFlags_NoDecoration | ImGuiWindowFlags_NoDocking | ImGuiWindowFlags_NoBringToFrontOnFocus | ImGuiWindowFlags_NoNav);

	// Enable previously disabled styles.
	ImGui::PopStyleVar(2);
}

void GUILibrary::SetToolbarWindowHeight(float toolbarHeight)
{
	_toolbarHeight = toolbarHeight;
}

void GUILibrary::EndToolbarWindow()
{
	ImGui::End();
}

void GUILibrary::Shutdown()
{
	ImGui::SaveIniSettingsToDisk("layout.ini");
	imguiDestroy();
}